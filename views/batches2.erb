<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/states.css">
  <link rel="stylesheet" href="/css/customer_by_state.css">
  <link rel="icon" type="image/x-icon" href="/img/fav.png">
  <title>Onwords WorkSpace</title>
  <style>
      .chart-container {
          display: flex;
          flex-wrap: wrap;
          justify-content: space-around;
          align-items: flex-start;
          padding: 20px;
          gap: 30px; /* Increase gap for better separation */
      }

      .chart-box {
          flex: 1;
          min-width: 300px; /* Adjust as needed */
          max-width: 480px; /* Optimal for readability and layout */
          display: flex;
          flex-direction: column;
          align-items: center;
          padding: 20px;
          box-shadow: 0 10px 20px rgba(0,0,0,0.12), 0 4px 6px rgba(0,0,0,0.08); /* Soft shadow for depth */
          background: #FFF; /* Clear background */
          border-radius: 8px; /* Rounded corners */
      }

      .chart-canvas {
          width: 100%;
          aspect-ratio: 1; /* Keep aspect ratio for charts */
      }

      .chart-labels {
          width: 100%;
          text-align: center;
          margin-top: 20px; /* Space between chart and labels */
      }

      .label-item {
          font-size: 16px; /* Larger font size for readability */
          color: #333; /* Dark gray for better contrast */
          padding: 4px; /* Padding for touch targets */
          border-radius: 4px; /* Soft rounded corners for labels */
          background-color: #f5f5f5; /* Light background for labels */
          margin: 5px 0; /* Space between labels */
          box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Subtle shadow for depth */
          display: inline-block; /* Make labels inline */
          width: auto; /* Auto width based on content */
          margin-right: 10px; /* Space between inline labels */
      }
  </style>
</head>
<body>
<header class="header">
  <div class="header__container">
    <a href="#" class="header__logo">Onwords WorkSpace</a>

    <div class="header__toggle">
      <i class='bx bx-menu' id="header-toggle"></i>
    </div>

  </div>
</header>

<div class="nav" id="navbar">
  <nav class="nav__container">
    <div>
      <img src="/img/onwords.svg" alt="Logo" class="nav__logo-name">
      <div class="nav__list">
        <div class="nav__items">

          <a href="/" class="nav__link">
            <i class='bx bx-home nav__icon'></i>
            <span class="nav__name">Home</span>
          </a>

          <div class="nav__dropdown">
            <i class='bx bx-user nav__icon'></i>
            <span class="nav__name">Clients</span>
            <i class='bx bx-chevron-down nav__icon nav__dropdown-icon'></i>
            <div class="nav__dropdown-collapse">
              <div class="nav__dropdown-content">
                <a href="/states" class="nav__dropdown-item">Status</a>
                <a href="/create_lead" class="nav__dropdown-item">Create Lead</a>
                <% allowed_departments = %w[ADMIN BRAVO] %>
                <% if allowed_departments.include?(@user_details['department']) %>
                  <a href="/bulk_assign" class="nav__dropdown-item">Bulk Assign</a>
                <% end %>
                <a href="/my_clients" class="nav__dropdown-item">My Clients</a>
              </div>
            </div>
          </div>

          <div class="nav__items">
            <div class="nav__dropdown">
              <i class='bx bx-compass nav__icon' ></i>
              <span class="nav__name">Files</span>
              <i class='bx bx-chevron-down nav__icon nav__dropdown-icon'></i>

              <div class="nav__dropdown-collapse">
                <div class="nav__dropdown-content">
                  <a href="/invoice" class="nav__dropdown-item">Invoice</a>
                  <a href="/proforma-invoice" class="nav__dropdown-item">Proforma</a>
                  <a href="/quotation" class="nav__dropdown-item">Quotation</a>
                </div>
              </div>
            </div>

            <% allowed_departments = %w[ADMIN BRAVO WEB] %>
            <% if allowed_departments.include?(@user_details['department']) %>
              <a href="/create_staff" class="nav__link">
                <i class='bx bx-plus nav__icon' ></i>
                <span class="nav__name">Create Staff</span>
              </a>
            <% end %>

            <div class="nav__dropdown">
              <i class='bx bx-smile nav__icon' ></i>
              <span class="nav__name">Attendance</span>
              <i class='bx bx-chevron-down nav__icon nav__dropdown-icon'></i>
              <div class="nav__dropdown-collapse">
                <div class="nav__dropdown-content">
                  <a href="/attendance" class="nav__dropdown-item">Daily</a>
                  <a href="/attendance/monthly_summary" class="nav__dropdown-item">Monthly</a>
                </div>
              </div>
            </div>

            <% allowed_departments = %w[ADMIN MANAGEMENT] %>
            <% if allowed_departments.include?(@user_details['department']) %>
              <a href="/notifications" class="nav__link">
                <i class='bx bx-bell nav__icon' ></i>
                <span class="nav__name">Notification</span>
                <% if @unread_count && @unread_count > 0 %>
                  <span class="nav__notification"><%= @unread_count %></span>
                <% end %>
              </a>
            <% end %>

            <% allowed_departments = %w[ADMIN BRAVO WEB MANAGEMENT] %>
            <% if allowed_departments.include?(@user_details['department']) %>
              <a href="/inventory" class="nav__link">
                <i class='bx bx-bookmark nav__icon' ></i>
                <span class="nav__name">Inventory</span>
              </a>
            <% end %>


            <% allowed_departments = %w[ADMIN BRAVO WEB MANAGEMENT] %>
            <% if allowed_departments.include?(@user_details['department']) %>
              <a href="/view_completed_schedules" class="nav__link">
                <i class='bx bx-message-check nav__icon' ></i>
                <span class="nav__name">Completion History</span>
              </a>
            <% end %>

            <% allowed_departments = %w[ADMIN BRAVO WEB MANAGEMENT PR] %>
            <% if allowed_departments.include?(@user_details['department']) %>
              <div class="nav__dropdown">
                <i class='bx bx-data nav__icon active' ></i>
                <span class="nav__name">Batch View</span>
                <i class='bx bx-chevron-down nav__icon nav__dropdown-icon'></i>
                <div class="nav__dropdown-collapse">
                  <div class="nav__dropdown-content">
                    <a href="/batch" class="nav__dropdown-item">Individual</a>
                    <a href="/batch2" class="nav__dropdown-item">Overall</a>
                  </div>
                </div>
              </div>
            <% end %>

            <% allowed_departments = %w[ADMIN BRAVO WEB MANAGEMENT PR] %>
            <% if allowed_departments.include?(@user_details['department']) %>
              <a href="/view_buckets" class="nav__link">
                <i class='bx bx-bar-chart nav__icon' ></i>
                <span class="nav__name">Bucket Analytics</span>
              </a>
            <% end %>

            <% allowed_departments = %w[ADMIN BRAVO WEB MANAGEMENT PR] %>
            <% if allowed_departments.include?(@user_details['department']) %>
              <a href="/performance_tables" class="nav__link">
                <i class='bx bx-stats nav__icon' ></i>
                <span class="nav__name">TC Performance</span>
              </a>
            <% end %>

            <a href="/schedules" class="nav__link">
              <i class='bx bx-phone nav__icon'></i>
              <span class="nav__name">Schedules</span>
              <% total_not_done = @not_done_calls %>
              <% if total_not_done > 0 %>
                <span class="nav__notification"><%= total_not_done %></span>
              <% end %>
            </a>

            <a href="/calendar" class="nav__link">
              <i class='bx bx-calendar nav__icon'></i>
              <span class="nav__name">Calendar</span>
              <% total_not_done = @not_done_visits + @not_done_installations + @not_done_services %>
              <% if total_not_done > 0 %>
                <span class="nav__notification"><%= total_not_done %></span>
              <% end %>
            </a>

          </div>
        </div>
      </div>
      <a href="/logout" class="nav__link nav__logout">
        <i class='bx bx-log-out nav__icon' ></i>
        <span class="nav__name">Log Out</span>
      </a>
    </div>
  </nav>
</div>

<main>

  <section>
    <ul id="batch-select">
      <% @months.each do |month| %>
        <li>
          <a href="/get_customer_by_batch?batch=<%= month %>">
            <%= month %> (<%= @month_counts[month] %> Leads)
          </a>
        </li>
      <% end %>
    </ul>
  </section>

  <div class="chart-container">
    <div class="chart-box">

      <canvas id="statePieChart" class="chart-canvas"></canvas>
      <div id="stateCounts" class="chart-labels"></div>
    </div>
    <div class="chart-box">
      <canvas id="inchargePieChart" class="chart-canvas"></canvas>
      <div id="inchargeCounts" class="chart-labels"></div>
    </div>
  </div>

</main>

<div class="loader"></div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</body>
<script>
    function filterCustomersByStatus() {
        const status = document.getElementById('status-filter').value;
        const batch = '<%= params['batch'] %>';

        window.location.href = `/get_customer_by_batch?batch=${batch}&status=${status}`;
    }
</script>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll('#batch-select a').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                document.querySelector('.loader').style.display = 'block';

                const urlParams = new URL(this.href).searchParams;
                const batch = urlParams.get('batch');

                fetch(`/get_customer_states_and_incharge_counts?batch=${batch}`)
                    .then(response => response.json())
                    .then(data => {
                        updatePieChart('statePieChart', 'Customers by State', data.states);
                        updatePieChart('inchargePieChart', 'Customers by Incharge', data.incharges);
                        displayCounts('stateCounts', data.states);
                        displayCounts('inchargeCounts', data.incharges);
                        document.querySelector('.loader').style.display = 'none';
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        document.querySelector('.loader').style.display = 'none';
                    });
            });
        });
    });

    function updatePieChart(elementId, title, data) {
        const ctx = document.getElementById(elementId).getContext('2d');
        if (window[elementId + 'Chart']) {
            window[elementId + 'Chart'].destroy();
        }
        window[elementId + 'Chart'] = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    data: Object.values(data),
                    backgroundColor: ['red', 'blue', 'green', 'yellow', 'purple', 'orange', 'cyan', 'magenta', 'grey', 'olive'],
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: { display: true, text: title }
                }
            }
        });
    }

    function displayCounts(elementId, data) {
        const container = document.getElementById(elementId);
        container.innerHTML = ''; // Clear the container at the start

        // Define states considered as "Potential Customers"
        const potentialCustomerStates = ['Interested', 'Following Up', 'Under Construction', 'Delayed', 'Need to visit', 'Visited'];

        // Initialize the count for "Potential Customers"
        let potentialCustomersCount = 0;

        // Aggregate counts for "Potential Customers"
        potentialCustomerStates.forEach(state => {
            if (data[state]) {
                potentialCustomersCount += data[state];
                delete data[state]; // Remove the state from data to avoid duplication
            }
        });

        // First, display the aggregated count for "Potential Customers"
        if (potentialCustomersCount > 0) { // Only display if the count is not zero
            const potentialCustomersDiv = document.createElement('div');
            potentialCustomersDiv.classList.add('label-item');
            potentialCustomersDiv.textContent = `Potential Customers: ${potentialCustomersCount}`;
            container.appendChild(potentialCustomersDiv);
        }

        // Then, display counts for all other states
        Object.entries(data).forEach(([key, value]) => {
            const div = document.createElement('div');
            div.classList.add('label-item');
            div.textContent = `${key}: ${value}`;
            container.appendChild(div);
        });
    }
</script>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        var loader = document.querySelector('.loader');

        document.querySelectorAll('a').forEach(function(link) {
            link.addEventListener('click', function() {
                loader.style.display = 'grid';
            });
        });
    });

    window.onload = function() {
        var loader = document.querySelector('.loader');
        if (loader) {
            loader.style.display = 'none';
        }
    };
</script>
<script>
    const showMenu = (headerToggle, navbarId) =>{
        const toggleBtn = document.getElementById(headerToggle),
            nav = document.getElementById(navbarId)

        if(headerToggle && navbarId){
            toggleBtn.addEventListener('click', ()=>{
                nav.classList.toggle('show-menu')
                toggleBtn.classList.toggle('bx-x')
            })
        }
    }
    showMenu('header-toggle','navbar')

    const linkColor = document.querySelectorAll('.nav__link')

    function colorLink(){
        linkColor.forEach(l => l.classList.remove('active'))
        this.classList.add('active')
    }
    linkColor.forEach(l => l.addEventListener('click', colorLink))
</script>
</html>